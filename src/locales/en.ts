export default {
  common: {
    inputText: 'Please input',
    selectText: 'Please select',
    startTimeText: 'Start time',
    endTimeText: 'End time',
    login: 'Login',
    required: 'This is required',
    loginOut: 'Login out',
    document: 'Document',
    profile: 'User Center',
    reminder: 'Reminder',
    loginOutMessage: 'Exit the system?',
    back: 'Back',
    ok: 'OK',
    save: 'Save',
    cancel: 'Cancel',
    close: 'Close',
    reload: 'Reload current',
    success: 'Success',
    closeTab: 'Close current',
    closeTheLeftTab: 'Close left',
    closeTheRightTab: 'Close right',
    closeOther: 'Close other',
    closeAll: 'Close all',
    prevLabel: 'Prev',
    nextLabel: 'Next',
    skipLabel: 'Jump',
    doneLabel: 'End',
    menu: 'Menu',
    menuDes: 'Menu bar rendered in routed structure',
    collapse: 'Collapse',
    collapseDes: 'Expand and zoom the menu bar',
    tagsView: 'Tags view',
    tagsViewDes: 'Used to record routing history',
    tool: 'Tool',
    toolDes: 'Used to set up custom systems',
    query: 'Query',
    reset: 'Reset',
    shrink: 'Put away',
    expand: 'Expand',
    confirmTitle: 'System Hint',
    exportMessage: 'Whether to confirm export data item?',
    importMessage: 'Whether to confirm import data item?',
    createSuccess: 'Create Success',
    updateSuccess: 'Update Success',
    delMessage: 'Delete the selected data?',
    delDataMessage: 'Delete the data?',
    delNoData: 'Please select the data to delete',
    delSuccess: 'Deleted successfully',
    index: 'Index',
    status: 'Status',
    createTime: 'Create Time',
    updateTime: 'Update Time',
    copy: 'Copy',
    copySuccess: 'Copy Success',
    copyError: 'Copy Error',
    confirm: 'Confirm',
    operation: 'Operation',
  },
  lock: {
    lockScreen: 'Lock screen',
    lock: 'Lock',
    lockPassword: 'Lock screen password',
    unlock: 'Click to unlock',
    backToLogin: 'Back to login',
    entrySystem: 'Entry the system',
    placeholder: 'Please enter the lock screen password',
    message: 'Lock screen password error'
  },
  error: {
    noPermission: `Sorry, you don't have permission to access this page.`,
    pageError: 'Sorry, the page you visited does not exist.',
    networkError: 'Sorry, the server reported an error.',
    returnToHome: 'Return to home'
  },
  permission: {
    hasPermission: `Please set the operation permission label value`,
    hasRole: `Please set the role permission tag value`
  },
  setting: {
    projectSetting: 'Project setting',
    theme: 'Theme',
    layout: 'Layout',
    systemTheme: 'System theme',
    menuTheme: 'Menu theme',
    interfaceDisplay: 'Interface display',
    breadcrumb: 'Breadcrumb',
    breadcrumbIcon: 'Breadcrumb icon',
    collapseMenu: 'Collapse menu',
    hamburgerIcon: 'Hamburger icon',
    screenfullIcon: 'Screenfull icon',
    sizeIcon: 'Size icon',
    localeIcon: 'Locale icon',
    messageIcon: 'Message icon',
    tagsView: 'Tags view',
    logo: 'Logo',
    greyMode: 'Grey mode',
    fixedHeader: 'Fixed header',
    headerTheme: 'Header theme',
    cutMenu: 'Cut Menu',
    copy: 'Copy',
    clearAndReset: 'Clear cache and reset',
    copySuccess: 'Copy success',
    copyFailed: 'Copy failed',
    footer: 'Footer',
    uniqueOpened: 'Unique opened',
    tagsViewIcon: 'Tags view icon',
    reExperienced: 'Please exit the login experience again',
    fixedMenu: 'Fixed menu'
  },
  size: {
    default: 'Default',
    large: 'Large',
    small: 'Small'
  },
  login: {
    welcome: 'Welcome to the system',
    message: 'Backstage management system',
    tenantname: 'TenantName',
    username: 'Username',
    password: 'Password',
    code: 'verification code',
    login: 'Sign in',
    relogin: 'Sign in again',
    otherLogin: 'Sign in with',
    register: 'Register',
    checkPassword: 'Confirm password',
    remember: 'Remember me',
    hasUser: 'Existing account? Go to login',
    forgetPassword: 'Forget password?',
    tenantNamePlaceholder: 'Please Enter Tenant Name',
    usernamePlaceholder: 'Please Enter Username',
    passwordPlaceholder: 'Please Enter Password',
    codePlaceholder: 'Please Enter Verification Code',
    mobileTitle: 'Mobile sign in',
    mobileNumber: 'Mobile Number',
    mobileNumberPlaceholder: 'Plaease Enter Mobile Number',
    backLogin: 'back',
    getSmsCode: 'Get SMS Code',
    btnMobile: 'Mobile sign in',
    btnQRCode: 'QR code sign in',
    qrcode: 'Scan the QR code to log in',
    btnRegister: 'Sign up',
    SmsSendMsg: 'code has been sent',
    resetPassword: "Reset Password",
    resetPasswordSuccess: "Reset Password Success",
    invalidTenantName:"Invalid Tenant Name"
  },
  captcha: {
    verification: 'Please complete security verification',
    slide: 'Swipe right to complete verification',
    point: 'Please click',
    success: 'Verification succeeded',
    fail: 'verification failed'
  },
  router: {
    login: 'Login',
    home: 'Home',
    analysis: 'Analysis',
    workplace: 'Workplace'
  },
  analysis: {
    newUser: 'New user',
    unreadInformation: 'Unread information',
    transactionAmount: 'Transaction amount',
    totalShopping: 'Total Shopping',
    monthlySales: 'Monthly sales',
    userAccessSource: 'User access source',
    january: 'January',
    february: 'February',
    march: 'March',
    april: 'April',
    may: 'May',
    june: 'June',
    july: 'July',
    august: 'August',
    september: 'September',
    october: 'October',
    november: 'November',
    december: 'December',
    estimate: 'Estimate',
    actual: 'Actual',
    directAccess: 'Airect access',
    mailMarketing: 'Mail marketing',
    allianceAdvertising: 'Alliance advertising',
    videoAdvertising: 'Video advertising',
    searchEngines: 'Search engines',
    weeklyUserActivity: 'Weekly user activity',
    activeQuantity: 'Active quantity',
    monday: 'Monday',
    tuesday: 'Tuesday',
    wednesday: 'Wednesday',
    thursday: 'Thursday',
    friday: 'Friday',
    saturday: 'Saturday',
    sunday: 'Sunday'
  },
  workplace: {
    welcome: 'Hello',
    happyDay: 'Wish you happy every day!',
    toady: `It's sunny today`,
    notice: 'Announcement',
    project: 'Project',
    access: 'Project access',
    toDo: 'To do',
    introduction: 'A serious introduction',
    shortcutOperation: 'Quick entry',
    operation: 'Operation',
    index: 'Index',
    personal: 'Personal',
    team: 'Team',
    quote: 'Quote',
    contribution: 'Contribution',
    hot: 'Hot',
    yield: 'Yield',
    dynamic: 'Dynamic',
    push: 'push',
    follow: 'Follow'
  },
  form: {
    input: 'Input',
    inputNumber: 'InputNumber',
    default: 'Default',
    icon: 'Icon',
    mixed: 'Mixed',
    textarea: 'Textarea',
    slot: 'Slot',
    position: 'Position',
    autocomplete: 'Autocomplete',
    select: 'Select',
    selectGroup: 'Select Group',
    selectV2: 'SelectV2',
    cascader: 'Cascader',
    switch: 'Switch',
    rate: 'Rate',
    colorPicker: 'Color Picker',
    transfer: 'Transfer',
    render: 'Render',
    radio: 'Radio',
    button: 'Button',
    checkbox: 'Checkbox',
    slider: 'Slider',
    datePicker: 'Date Picker',
    shortcuts: 'Shortcuts',
    today: 'Today',
    yesterday: 'Yesterday',
    aWeekAgo: 'A week ago',
    week: 'Week',
    year: 'Year',
    month: 'Month',
    dates: 'Dates',
    daterange: 'Date Range',
    monthrange: 'Month Range',
    dateTimePicker: 'DateTimePicker',
    dateTimerange: 'Datetime Range',
    timePicker: 'Time Picker',
    timeSelect: 'Time Select',
    inputPassword: 'input Password',
    passwordStrength: 'Password Strength',
    operate: 'operate',
    change: 'Change',
    restore: 'Restore',
    disabled: 'Disabled',
    disablement: 'Disablement',
    delete: 'Delete',
    add: 'Add',
    setValue: 'Set value',
    resetValue: 'Reset value',
    set: 'Set',
    subitem: 'Subitem',
    formValidation: 'Form validation',
    verifyReset: 'Verify reset',
    remark: 'Remark'
  },
  watermark: {
    watermark: 'Watermark'
  },
  table: {
    table: 'Table',
    index: 'Index',
    title: 'Title',
    author: 'Author',
    createTime: 'Create time',
    action: 'Action',
    pagination: 'pagination',
    reserveIndex: 'Reserve index',
    restoreIndex: 'Restore index',
    showSelections: 'Show selections',
    hiddenSelections: 'Restore selections',
    showExpandedRows: 'Show expanded rows',
    hiddenExpandedRows: 'Hidden expanded rows',
    header: 'Header'
  },
  action: {
    create: 'Create',
    add: 'Add',
    del: 'Delete',
    delete: 'Delete',
    edit: 'Edit',
    update: 'Update',
    preview: 'Preview',
    more: 'More',
    sync: 'Sync',
    save: 'Save',
    detail: 'Detail',
    export: 'Export',
    import: 'Import',
    generate: 'Generate',
    logout: 'Login Out',
    test: 'Test',
    typeCreate: 'Dict Type Create',
    typeUpdate: 'Dict Type Eidt',
    dataCreate: 'Dict Data Create',
    dataUpdate: 'Dict Data Eidt',
    fileUpload: 'File Upload'
  },
  dialog: {
    dialog: 'Dialog',
    open: 'Open',
    close: 'Close'
  },
  sys: {
    api: {
      operationFailed: 'Operation failed',
      errorTip: 'Error Tip',
      errorMessage: 'The operation failed, the system is abnormal!',
      timeoutMessage: 'Login timed out, please log in again!',
      apiTimeoutMessage: 'The interface request timed out, please refresh the page and try again!',
      apiRequestFailed: 'The interface request failed, please try again later!',
      networkException: 'network anomaly',
      networkExceptionMsg:
        'Please check if your network connection is normal! The network is abnormal',

      errMsg401: 'The user does not have permission (token, user name, password error)!',
      errMsg403: 'The user is authorized, but access is forbidden!',
      errMsg404: 'Network request error, the resource was not found!',
      errMsg405: 'Network request error, request method not allowed!',
      errMsg408: 'Network request timed out!',
      errMsg500: 'Server error, please contact the administrator!',
      errMsg501: 'The network is not implemented!',
      errMsg502: 'Network Error!',
      errMsg503: 'The service is unavailable, the server is temporarily overloaded or maintained!',
      errMsg504: 'Network timeout!',
      errMsg505: 'The http version does not support the request!',
      errMsg901: 'Demo mode, no write operations are possible!'
    },
    app: {
      logoutTip: 'Reminder',
      logoutMessage: 'Confirm to exit the system?',
      menuLoading: 'Menu loading...'
    },
    exception: {
      backLogin: 'Back Login',
      backHome: 'Back Home',
      subTitle403: "Sorry, you don't have access to this page.",
      subTitle404: 'Sorry, the page you visited does not exist.',
      subTitle500: 'Sorry, the server is reporting an error.',
      noDataTitle: 'No data on the current page.',
      networkErrorTitle: 'Network Error',
      networkErrorSubTitle:
        'Sorry, Your network connection has been disconnected, please check your network!'
    },
    lock: {
      unlock: 'Click to unlock',
      alert: 'Lock screen password error',
      backToLogin: 'Back to login',
      entry: 'Enter the system',
      placeholder: 'Please enter the lock screen password or user password'
    },
    login: {
      backSignIn: 'Back sign in',
      mobileSignInFormTitle: 'Mobile sign in',
      qrSignInFormTitle: 'Qr code sign in',
      signInFormTitle: 'Sign in',
      signUpFormTitle: 'Sign up',
      forgetFormTitle: 'Reset password',

      signInTitle: 'Backstage management system',
      signInDesc: 'Enter your personal details and get started!',
      policy: 'I agree to the xxx Privacy Policy',
      scanSign: `scanning the code to complete the login`,

      loginButton: 'Sign in',
      registerButton: 'Sign up',
      rememberMe: 'Remember me',
      forgetPassword: 'Forget Password?',
      otherSignIn: 'Sign in with',

      // notify
      loginSuccessTitle: 'Login successful',
      loginSuccessDesc: 'Welcome back',

      // placeholder
      accountPlaceholder: 'Please input username',
      passwordPlaceholder: 'Please input password',
      smsPlaceholder: 'Please input sms code',
      mobilePlaceholder: 'Please input mobile',
      policyPlaceholder: 'Register after checking',
      diffPwd: 'The two passwords are inconsistent',

      userName: 'Username',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      email: 'Email',
      smsCode: 'SMS code',
      mobile: 'Mobile'
    }
  },
  profile: {
    user: {
      title: 'Personal Information',
      username: 'User Name',
      nickname: 'Nick Name',
      mobile: 'Phone Number',
      email: 'User Mail',
      dept: 'Department',
      posts: 'Position',
      roles: 'Own Role',
      sex: 'Sex',
      man: 'Man',
      woman: 'Woman',
      createTime: 'Created Date'
    },
    info: {
      title: 'Basic Information',
      basicInfo: 'Basic Information',
      resetPwd: 'Reset Password',
      userSocial: 'Social Information'
    },
    rules: {
      nickname: 'Please Enter User Nickname',
      mail: 'Please Input The Email Address',
      truemail: 'Please Input The Correct Email Address',
      phone: 'Please Enter The Phone Number',
      truephone: 'Please Enter The Correct Phone Number'
    },
    password: {
      oldPassword: 'Old PassWord',
      newPassword: 'New Password',
      confirmPassword: 'Confirm Password',
      oldPwdMsg: 'Please Enter Old Password',
      newPwdMsg: 'Please Enter New Password',
      cfPwdMsg: 'Please Enter Confirm Password',
      diffPwd: 'The Passwords Entered Twice No Match'
    }
  },
  cropper: {
    selectImage: 'Select Image',
    uploadSuccess: 'Uploaded success!',
    modalTitle: 'Avatar upload',
    okText: 'Confirm and upload',
    btn_reset: 'Reset',
    btn_rotate_left: 'Counterclockwise rotation',
    btn_rotate_right: 'Clockwise rotation',
    btn_scale_x: 'Flip horizontal',
    btn_scale_y: 'Flip vertical',
    btn_zoom_in: 'Zoom in',
    btn_zoom_out: 'Zoom out',
    preview: 'Preivew'
  },
  bpm: {
    category: {
      name: 'Category Name',
      namePlaceholder: 'Please enter category name',
      nameRequired: 'Category name cannot be empty',
      code: 'Category Code',
      codePlaceholder: 'Please enter category code',
      codeRequired: 'Category code cannot be empty',
      description: 'Category Description',
      descriptionPlaceholder: 'Please enter category description',
      status: 'Category Status',
      statusRequired: 'Category status cannot be empty',
      sort: 'Category Sort',
      sortPlaceholder: 'Please enter category sort',
      sortRequired: 'Category sort cannot be empty'
    },
    definition: {
      id: 'Definition ID',
      name: 'Process Name',
      icon: 'Process Icon',
      visibleRange: 'Visible Range',
      type: 'Process Type',
      formInfo: 'Form Information',
      version: 'Process Version',
      deployTime: 'Deployment Time',
      allVisible: 'All Visible',
      etc: 'etc.',
      peopleVisible: 'people visible',
      noForm: 'No Form',
      restore: 'Restore',
      formDetail: 'Form Detail',
      manual: 'Workflow Manual'
    },
    model: {
      dragToSort: 'Drag to sort',
      sort: 'Sort',
      create: 'Create',
      category: 'Category',
      rename: 'Rename',
      deleteCategory: 'Delete Category',
      saveSort: 'Save Sort',
      processName: 'Process Name',
      visibleRange: 'Visible Range',
      allVisible: 'All Visible',
      etc: ' etc.',
      deptVisible: 'departments visible',
      peopleVisible: 'people visible',
      processType: 'Process Type',
      formInfo: 'Form Information',
      noForm: 'No Form',
      lastDeploy: 'Last Deployment',
      notDeployed: 'Not Deployed',
      disabled: 'Disabled',
      copy: 'Copy',
      deploy: 'Deploy',
      history: 'History',
      report: 'Report',
      disable: 'Disable',
      enable: 'Enable',
      clean: 'Clean',
      renameCategory: 'Rename Category',
      formDetail: 'Form Detail',
      confirmClean: 'Are you sure to clean the process named "{name}"?',
      cleanSuccess: 'Clean successful',
      confirmChangeState: 'Are you sure to {state} the process named "{name}"?',
      confirmDeploy: 'Are you sure to deploy this process?',
      deploySuccess: 'Deploy successful',
      sortSuccess: 'Sort models successful',
      pleaseEnterName: 'Please enter a name',
      renameSuccess: 'Rename successful',
      categoryNotEmpty: 'This category still has process definitions, deletion is not allowed',
      confirmDeleteCategory: 'Are you sure to delete this category?',
      form: {
        processIdentifier: 'Process Identifier',
        enterProcessIdentifier: 'Please enter process identifier, start with letter or underscore',
        identifierNotModifiable: 'Process identifier cannot be modified!',
        identifierNotModifiableAfterCreation: 'After creation, process identifier cannot be modified!',
        processName: 'Process Name',
        enterProcessName: 'Please enter process name',
        processCategory: 'Process Category',
        selectProcessCategory: 'Please select process category',
        processIcon: 'Process Icon',
        processDescription: 'Process Description',
        processType: 'Process Type',
        isVisible: 'Is Visible',
        whoCanInitiate: 'Who Can Initiate',
        selectWhoCanInitiate: 'Please select who can initiate',
        allMembers: 'All Members',
        specificPersons: 'Specific Persons',
        specificDepartments: 'Specific Departments',
        selectPerson: 'Select Person',
        selectDepartment: 'Select Department',
        processAdmin: 'Process Administrator',
        processNameRequired: 'Process name cannot be empty',
        processIdentifierRequired: 'Process identifier cannot be empty',
        processCategoryRequired: 'Process category cannot be empty',
        processTypeRequired: 'Process type cannot be empty',
        visibilityRequired: 'Visibility cannot be empty',
        processAdminRequired: 'Process administrator cannot be empty',
        submitterPermissions: 'Submitter Permissions',
        allowCancelRunning: 'Allow cancellation of running applications',
        cancelRunningTip: 'After the first approval node passes, the submitter can still cancel the application',
        processCode: 'Process Code',
        prefix: 'Prefix',
        infix: 'Infix',
        postfix: 'Postfix',
        codeExample: 'Code example: {example}',
        autoDeduplicate: 'Auto Deduplicate',
        duplicateApproverTip: 'When the same approver appears multiple times in the process:',
        noAutoApproval: 'No automatic approval',
        approveOnce: 'Approve once only, subsequent duplicate approval nodes automatically pass',
        approveConsecutive: 'Only automatically pass consecutive approval nodes',
        titleSettings: 'Title Settings',
        systemDefault: 'System Default',
        showProcessName: 'Show Process Name',
        customTitle: 'Custom Title',
        insertFieldTip: 'Enter "{" to insert form field',
        insertFieldPlaceholder: 'Please insert form fields (enter "{" to select form field) or enter text',
        summarySettings: 'Summary Settings',
        showFirstThreeFields: 'Show first 3 form fields',
        customSummary: 'Custom Summary',
        selectDisplayFields: 'Please select form fields to display',
        processPreNotification: 'Process Pre-notification',
        processPostNotification: 'Process Post-notification',
        taskPreNotification: 'Task Pre-notification',
        taskPostNotification: 'Task Post-notification',
        notifyAfterStart: 'Notify after process starts',
        notifyAfterEnd: 'Notify after process ends',
        notifyDuringTask: 'Notify during task execution',
        notifyAfterTask: 'Notify after task ends',
        basicInfo: 'Basic Information',
        formDesign: 'Form Design',
        processDesign: 'Process Design',
        extraSettings: 'Extra Settings',
        formType: 'Form Type',
        processForm: 'Process Form',
        formSubmitPath: 'Form Submit Path',
        formViewPath: 'Form View Path',
        enterFormSubmitPath: 'Please enter form submit path',
        enterFormViewPath: 'Please enter form view path',
        customFormSubmitPathTip: 'Custom form submit path using Vue route address, e.g.: bpm/oa/leave/create.vue',
        customFormViewPathTip: 'Custom form view component path using Vue component address, e.g.: bpm/oa/leave/detail.vue',
        formPreview: 'Form Preview',
        formTypeRequired: 'Form type cannot be empty',
        processFormRequired: 'Process form cannot be empty',
        formSubmitPathRequired: 'Form submit path cannot be empty',
        formViewPathRequired: 'Form view path cannot be empty'

      },
    },
    design: {
      messageList: "Message List",
      createNewMessage: "Create New Message",
      serialNumber: "No.",
      messageId: "Message ID",
      messageName: "Message Name",
      signalList: "Signal List",
      createNewSignal: "Create New Signal",
      signalId: "Signal ID",
      signalName: "Signal Name",
      createMessage: "Create Message",
      createSignal: "Create Signal",
      cancel: "Cancel",
      save: "Save",
      asyncBefore: "Async Before",
      asyncAfter: "Async After",
      exclusive: "Exclusive",
      eventType: 'Event Type',
      listenerType: 'Listener Type',
      addListener: 'Add Listener',
      selectListener: 'Select Listener',
      executionListener: 'Execution Listener',
      javaClass: 'Java Class',
      expression: 'Expression',
      action: 'Action',
      edit: 'Edit',
      remove: 'Remove',
      index: 'Index',
      propertyName: 'Property Name',
      propertyValue: 'Property Value',
      
      addProperty: 'Add Property',
      propertyConfig: 'Property Config',
      propertyNameLabel: 'Property Name:',
      propertyValueLabel: 'Property Value:',
    
      confirm: 'Confirm',
      general: 'General',
      messageAndSignal: 'Message & Signal',
      flowCondition: 'Flow Condition',
      form: 'Form',
      multiApprovalType: 'Multi-approval Type',
      multiInstance: 'Multi Instance',
   
      taskListener: 'Task Listener',
      extensionProperties: 'Extension Properties',
      other: 'Other',
      customConfig: 'Custom Config',
      processId: "Process ID",
      enterProcessId: "Please enter process ID",
      processName: "Process Name",
      enterProcessName: "Please enter process name",
      id: "ID",
      name: "Name",
      processIdRequired: "Process ID is required",
      processNameRequired: "Process name is required",
      elementDocumentation: 'Element Documentation:',
      executeType: 'Execute Type',

      delegateExpression: 'Delegate Expression',
      processForm: 'Process Form',
      businessKey: 'Business Key',
      none: 'None',
      candidateStrategy: "Rule Type",
      role: "Role",
      dept: "Department",
      loading: "Loading, please wait",

      post: "Post",
      user: "User", 
      userGroup: "User Group", 
      formUser: "Form Dept Field", 
      formDept: "Form Dept Field", 
      deptLevel: "Department Level", 
     
      skipExpression: "Skip Expression" ,
      openFile: 'Open File',
      downloadXml: 'Download as XML',
      downloadSvg: 'Download as SVG',
      downloadBpmn: 'Download as BPMN',
      downloadFile: 'Download File',
      preview: 'Preview',
      previewXml: 'Preview XML',
      previewJson: 'Preview JSON',
      simulation: 'Simulation',
      exitSimulation: 'Exit Simulation',
      startSimulation: 'Start Simulation',

      multiInstanceNotImplemented: 'Multi-instance for nodes other than UserTask is not implemented yet',
    quickConfig: 'Quick Configuration',
    sequentialApproval: 'Sequential Approval',
    countersign: 'Countersign',
    orSign: 'Or-sign',
    countersignType: 'Countersign Type',
    parallelMultiInstance: 'Parallel Multi-instance',
    sequentialMultiInstance: 'Sequential Multi-instance',

    }
  
    
  }
  }
